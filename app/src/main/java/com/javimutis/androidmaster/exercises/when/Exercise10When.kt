package com.javimutis.androidmaster.exercises.`when`
/* Explicaci√≥n general del c√≥digo:
Se crean operaciones en main() usando Triple

Cada Triple almacena un n√∫mero, otro n√∫mero y un operador en formato String.

Se prueban diferentes escenarios: suma, divisi√≥n, operador inv√°lido y divisi√≥n por 0.

Se usa la funci√≥n printOperationResult() para procesar cada operaci√≥n.

Se extraen los valores de Triple usando desestructuraci√≥n.

Se utiliza when para realizar la operaci√≥n matem√°tica correspondiente.

Se valida la divisi√≥n para evitar errores por dividir entre 0.

Se maneja el caso de operadores inv√°lidos con un mensaje de error.

Se imprime el resultado en la consola con formato n√∫mero operador n√∫mero = resultado

Ejemplo: 5 + 3 = 8

Si la operaci√≥n no es v√°lida, muestra un mensaje como "Operador inv√°lido" o "Divisi√≥n por 0".

*/


/**
 * üìå Calculadora b√°sica con `when`
 *
 * Este programa realiza operaciones matem√°ticas b√°sicas entre dos n√∫meros.
 * Soporta los siguientes operadores:
 *  - "+" ‚Üí Suma
 *  - "-" ‚Üí Resta
 *  - "*" ‚Üí Multiplicaci√≥n
 *  - "/" ‚Üí Divisi√≥n (con validaci√≥n para evitar divisi√≥n por cero)
 *
 * Si se ingresa un operador no v√°lido, se muestra un mensaje de error.
 */

fun main() {
    // üìå Se crean operaciones matem√°ticas usando `Triple`, que almacena tres valores:
    // - Primer n√∫mero
    // - Segundo n√∫mero
    // - Operador matem√°tico en formato String
    val operation1 = Triple(5, 3, "+")  // 5 + 3
    val operation2 = Triple(-10, 2, "/") // -10 / 2
    val operation3 = Triple(2, 3, "√ß")  // Operador inv√°lido
    val operation4 = Triple(8, 0, "/")  // Divisi√≥n por 0 (caso especial)

    // üìå Llamamos a la funci√≥n `printOperationResult` para mostrar el resultado de cada operaci√≥n
    printOperationResult(operation1)
    printOperationResult(operation2)
    printOperationResult(operation3)
    printOperationResult(operation4)
}

/**
 * üìå Funci√≥n que recibe una operaci√≥n y muestra su resultado.
 * @param operation Un `Triple<Int, Int, String>` con los dos n√∫meros y el operador.
 */
fun printOperationResult(operation: Triple<Int, Int, String>) {
    // üìå Desestructuramos el `Triple` para obtener los valores individuales
    val (firstNumber, secondNumber, operator) = operation

    // üìå Evaluamos el operador usando `when` para realizar la operaci√≥n correspondiente
    val result = when (operator) {
        "+" -> firstNumber + secondNumber  // Suma
        "-" -> firstNumber - secondNumber  // Resta
        "*" -> firstNumber * secondNumber  // Multiplicaci√≥n
        "/" -> if (secondNumber != 0) firstNumber / secondNumber else "Divisi√≥n por 0"
        // Si el segundo n√∫mero es 0, se muestra un mensaje de error en lugar de dividir

        else -> "Operador inv√°lido" // Si el operador no es v√°lido, se muestra un mensaje de error
    }

    // üìå Se imprime el resultado en la consola
    println("$firstNumber $operator $secondNumber = $result")
}
